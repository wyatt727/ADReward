package com.android.billingclient.api;

import com.android.billingclient.api.BillingResult;

/* compiled from: com.android.billingclient:billing@@6.2.1 */
/* loaded from: classes.dex */
final class zzca {
    static final BillingResult zzA;
    static final BillingResult zzB;
    static final BillingResult zzC;
    static final BillingResult zzD;
    static final BillingResult zzE;
    static final BillingResult zzF;
    public static final /* synthetic */ int zzG = 0;
    static final BillingResult zza;
    static final BillingResult zzb;
    static final BillingResult zzc;
    static final BillingResult zzd;
    static final BillingResult zze;
    static final BillingResult zzf;
    static final BillingResult zzg;
    static final BillingResult zzh;
    static final BillingResult zzi;
    static final BillingResult zzj;
    static final BillingResult zzk;
    static final BillingResult zzl;
    static final BillingResult zzm;
    static final BillingResult zzn;
    static final BillingResult zzo;
    static final BillingResult zzp;
    static final BillingResult zzq;
    static final BillingResult zzr;
    static final BillingResult zzs;
    static final BillingResult zzt;
    static final BillingResult zzu;
    static final BillingResult zzv;
    static final BillingResult zzw;
    static final BillingResult zzx;
    static final BillingResult zzy;
    static final BillingResult zzz;

    static {
        BillingResult.Builder builderNewBuilder = BillingResult.newBuilder();
        builderNewBuilder.setResponseCode(3);
        builderNewBuilder.setDebugMessage("Google Play In-app Billing API version is less than 3");
        zza = builderNewBuilder.build();
        BillingResult.Builder builderNewBuilder2 = BillingResult.newBuilder();
        builderNewBuilder2.setResponseCode(3);
        builderNewBuilder2.setDebugMessage("Google Play In-app Billing API version is less than 9");
        zzb = builderNewBuilder2.build();
        BillingResult.Builder builderNewBuilder3 = BillingResult.newBuilder();
        builderNewBuilder3.setResponseCode(3);
        builderNewBuilder3.setDebugMessage("Billing service unavailable on device.");
        zzc = builderNewBuilder3.build();
        BillingResult.Builder builderNewBuilder4 = BillingResult.newBuilder();
        builderNewBuilder4.setResponseCode(5);
        builderNewBuilder4.setDebugMessage("Client is already in the process of connecting to billing service.");
        zzd = builderNewBuilder4.build();
        BillingResult.Builder builderNewBuilder5 = BillingResult.newBuilder();
        builderNewBuilder5.setResponseCode(5);
        builderNewBuilder5.setDebugMessage("The list of SKUs can't be empty.");
        zze = builderNewBuilder5.build();
        BillingResult.Builder builderNewBuilder6 = BillingResult.newBuilder();
        builderNewBuilder6.setResponseCode(5);
        builderNewBuilder6.setDebugMessage("SKU type can't be empty.");
        zzf = builderNewBuilder6.build();
        BillingResult.Builder builderNewBuilder7 = BillingResult.newBuilder();
        builderNewBuilder7.setResponseCode(5);
        builderNewBuilder7.setDebugMessage("Product type can't be empty.");
        zzg = builderNewBuilder7.build();
        BillingResult.Builder builderNewBuilder8 = BillingResult.newBuilder();
        builderNewBuilder8.setResponseCode(-2);
        builderNewBuilder8.setDebugMessage("Client does not support extra params.");
        zzh = builderNewBuilder8.build();
        BillingResult.Builder builderNewBuilder9 = BillingResult.newBuilder();
        builderNewBuilder9.setResponseCode(5);
        builderNewBuilder9.setDebugMessage("Invalid purchase token.");
        zzi = builderNewBuilder9.build();
        BillingResult.Builder builderNewBuilder10 = BillingResult.newBuilder();
        builderNewBuilder10.setResponseCode(6);
        builderNewBuilder10.setDebugMessage("An internal error occurred.");
        zzj = builderNewBuilder10.build();
        BillingResult.Builder builderNewBuilder11 = BillingResult.newBuilder();
        builderNewBuilder11.setResponseCode(5);
        builderNewBuilder11.setDebugMessage("SKU can't be null.");
        zzk = builderNewBuilder11.build();
        BillingResult.Builder builderNewBuilder12 = BillingResult.newBuilder();
        builderNewBuilder12.setResponseCode(0);
        zzl = builderNewBuilder12.build();
        BillingResult.Builder builderNewBuilder13 = BillingResult.newBuilder();
        builderNewBuilder13.setResponseCode(-1);
        builderNewBuilder13.setDebugMessage("Service connection is disconnected.");
        zzm = builderNewBuilder13.build();
        BillingResult.Builder builderNewBuilder14 = BillingResult.newBuilder();
        builderNewBuilder14.setResponseCode(2);
        builderNewBuilder14.setDebugMessage("Timeout communicating with service.");
        zzn = builderNewBuilder14.build();
        BillingResult.Builder builderNewBuilder15 = BillingResult.newBuilder();
        builderNewBuilder15.setResponseCode(-2);
        builderNewBuilder15.setDebugMessage("Client does not support subscriptions.");
        zzo = builderNewBuilder15.build();
        BillingResult.Builder builderNewBuilder16 = BillingResult.newBuilder();
        builderNewBuilder16.setResponseCode(-2);
        builderNewBuilder16.setDebugMessage("Client does not support subscriptions update.");
        zzp = builderNewBuilder16.build();
        BillingResult.Builder builderNewBuilder17 = BillingResult.newBuilder();
        builderNewBuilder17.setResponseCode(-2);
        builderNewBuilder17.setDebugMessage("Client does not support get purchase history.");
        zzq = builderNewBuilder17.build();
        BillingResult.Builder builderNewBuilder18 = BillingResult.newBuilder();
        builderNewBuilder18.setResponseCode(-2);
        builderNewBuilder18.setDebugMessage("Client does not support price change confirmation.");
        zzr = builderNewBuilder18.build();
        BillingResult.Builder builderNewBuilder19 = BillingResult.newBuilder();
        builderNewBuilder19.setResponseCode(-2);
        builderNewBuilder19.setDebugMessage("Play Store version installed does not support cross selling products.");
        zzs = builderNewBuilder19.build();
        BillingResult.Builder builderNewBuilder20 = BillingResult.newBuilder();
        builderNewBuilder20.setResponseCode(-2);
        builderNewBuilder20.setDebugMessage("Client does not support multi-item purchases.");
        zzt = builderNewBuilder20.build();
        BillingResult.Builder builderNewBuilder21 = BillingResult.newBuilder();
        builderNewBuilder21.setResponseCode(-2);
        builderNewBuilder21.setDebugMessage("Client does not support offer_id_token.");
        zzu = builderNewBuilder21.build();
        BillingResult.Builder builderNewBuilder22 = BillingResult.newBuilder();
        builderNewBuilder22.setResponseCode(-2);
        builderNewBuilder22.setDebugMessage("Client does not support ProductDetails.");
        zzv = builderNewBuilder22.build();
        BillingResult.Builder builderNewBuilder23 = BillingResult.newBuilder();
        builderNewBuilder23.setResponseCode(-2);
        builderNewBuilder23.setDebugMessage("Client does not support in-app messages.");
        zzw = builderNewBuilder23.build();
        BillingResult.Builder builderNewBuilder24 = BillingResult.newBuilder();
        builderNewBuilder24.setResponseCode(-2);
        builderNewBuilder24.setDebugMessage("Client does not support user choice billing.");
        zzx = builderNewBuilder24.build();
        BillingResult.Builder builderNewBuilder25 = BillingResult.newBuilder();
        builderNewBuilder25.setResponseCode(-2);
        builderNewBuilder25.setDebugMessage("Play Store version installed does not support external offer.");
        zzy = builderNewBuilder25.build();
        BillingResult.Builder builderNewBuilder26 = BillingResult.newBuilder();
        builderNewBuilder26.setResponseCode(5);
        builderNewBuilder26.setDebugMessage("Unknown feature");
        zzz = builderNewBuilder26.build();
        BillingResult.Builder builderNewBuilder27 = BillingResult.newBuilder();
        builderNewBuilder27.setResponseCode(-2);
        builderNewBuilder27.setDebugMessage("Play Store version installed does not support get billing config.");
        zzA = builderNewBuilder27.build();
        BillingResult.Builder builderNewBuilder28 = BillingResult.newBuilder();
        builderNewBuilder28.setResponseCode(-2);
        builderNewBuilder28.setDebugMessage("Query product details with serialized docid is not supported.");
        zzB = builderNewBuilder28.build();
        BillingResult.Builder builderNewBuilder29 = BillingResult.newBuilder();
        builderNewBuilder29.setResponseCode(4);
        builderNewBuilder29.setDebugMessage("Item is unavailable for purchase.");
        zzC = builderNewBuilder29.build();
        BillingResult.Builder builderNewBuilder30 = BillingResult.newBuilder();
        builderNewBuilder30.setResponseCode(-2);
        builderNewBuilder30.setDebugMessage("Query product details with developer specified account is not supported.");
        zzD = builderNewBuilder30.build();
        BillingResult.Builder builderNewBuilder31 = BillingResult.newBuilder();
        builderNewBuilder31.setResponseCode(-2);
        builderNewBuilder31.setDebugMessage("Play Store version installed does not support alternative billing only.");
        zzE = builderNewBuilder31.build();
        BillingResult.Builder builderNewBuilder32 = BillingResult.newBuilder();
        builderNewBuilder32.setResponseCode(5);
        builderNewBuilder32.setDebugMessage("To use this API you must specify a PurchasesUpdateListener when initializing a BillingClient.");
        zzF = builderNewBuilder32.build();
    }

    static BillingResult zza(int i, String str) {
        BillingResult.Builder builderNewBuilder = BillingResult.newBuilder();
        builderNewBuilder.setResponseCode(i);
        builderNewBuilder.setDebugMessage(str);
        return builderNewBuilder.build();
    }
}
