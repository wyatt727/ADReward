name: ADReward CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install PNPM
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false
        
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

    - uses: actions/cache@v3
      name: Setup pnpm cache
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Build Kotlin IR scanner
      run: |
        cd packages/ktir-scanner
        ./gradlew shadowJar
        mkdir -p ../../jars
        cp build/libs/ktir-scanner.jar ../../jars/
        
    - name: Verify ktir-scanner.jar
      run: |
        if [ ! -f "jars/ktir-scanner.jar" ]; then
          echo "ktir-scanner.jar was not created properly"
          exit 1
        fi
        echo "ktir-scanner.jar size: $(ls -lh jars/ktir-scanner.jar | awk '{print $5}')"
      
    - name: Run linting
      run: pnpm lint
      
    - name: Build TypeScript
      run: pnpm build
      
    - name: Run tests
      run: pnpm test
      
    - name: Smoke test - CLI help
      run: node packages/cli/dist/cli.js --help
  
  matrix-cli-tests:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        feature: [
          { name: 'standard', args: '--analyze --gen-script' }, 
          { name: 'ir-only', args: '--analyze --gen-script --ir-only' },
          { name: 'ktir', args: '--analyze --gen-script --ir' },
          { name: 'tests', args: '--analyze --gen-script --tests' },
          { name: 'watch', args: '--analyze --gen-script --watch' }
        ]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
      
      - name: Install PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Build project
        run: pnpm build
      
      - name: Prepare test fixtures
        run: |
          mkdir -p analysis/com.example.test
          cp -R packages/core/test/fixtures/* analysis/com.example.test/
      
      - name: Run ADReward with ${{ matrix.feature.name }} features
        run: |
          echo "Running with: ${{ matrix.feature.args }}"
          node packages/cli/dist/cli.js --package com.example.test ${{ matrix.feature.args }} --verbose --out ./analysis
      
      - name: Verify output
        run: |
          if [[ "${{ matrix.feature.name }}" == *tests* ]]; then
            grep -q "self-invoking test stubs" analysis/com.example.test/auto-ad-bypass.js || (echo "Test stubs not generated" && exit 1)
          fi
  
  watch-integration-test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
      
      - name: Install PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Build project
        run: pnpm build
      
      - name: Prepare test environment
        run: |
          mkdir -p watch-test
          echo 'console.log("Initial script");' > watch-test/test-script.js
      
      - name: Start watch in background
        run: |
          # Start watch mode in background
          node packages/core/test/watch-integration-test.js &
          # Save PID for later termination
          echo $! > watch-test/watch.pid
          # Wait for it to start
          sleep 2
      
      - name: Modify script file to trigger reload
        run: |
          # Modify the script file to trigger reload
          echo 'console.log("Modified script");' > watch-test/test-script.js
          # Wait for reload to happen
          sleep 2
      
      - name: Verify reload was triggered
        run: |
          # Check if reload event was recorded
          grep -q "RELOAD EVENT DETECTED" watch-test/reload-log.txt || (echo "Reload not detected" && exit 1)
          # Kill background process
          kill $(cat watch-test/watch.pid)
          
      - name: Create integration test script
        run: |
          cat > packages/core/test/watch-integration-test.js << 'EOF'
          #!/usr/bin/env node
          import fs from 'fs';
          import path from 'path';
          import { watch } from '../dist/watch.js';
          
          async function main() {
            try {
              const scriptPath = path.resolve('watch-test/test-script.js');
              
              // Create test directory and script if they don't exist
              if (!fs.existsSync('watch-test')) {
                fs.mkdirSync('watch-test', { recursive: true });
              }
              
              if (!fs.existsSync(scriptPath)) {
                fs.writeFileSync(scriptPath, 'console.log("Initial script");');
              }
              
              console.log('Starting watch mode integration test');
              
              // Mock the actual Frida execution for testing
              const mockFridaExecution = {
                packageName: 'com.example.test',
                scriptPath,
                mockMode: true // Don't actually spawn Frida
              };
              
              const { onReload } = await watch(mockFridaExecution);
              
              // Register reload callback to log reload events
              onReload(() => {
                console.log('RELOAD EVENT DETECTED');
                fs.writeFileSync('watch-test/reload-log.txt', 'RELOAD EVENT DETECTED at ' + new Date().toISOString());
              });
              
              console.log('Watch mode started, waiting for file changes...');
            } catch (error) {
              console.error('Error:', error);
              process.exit(1);
            }
          }
          
          main();
          EOF
          
          chmod +x packages/core/test/watch-integration-test.js
  
  docker:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./packages/server/Dockerfile
          push: false
          tags: adreward-server:test
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max 